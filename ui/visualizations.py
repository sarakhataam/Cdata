import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import re
import inspect
import plotly.io as pio
import io
from PyPDF2 import PdfMerger

def execute_visualization_code(code, df):
    """
    Execute the visualization code generated by the AI.
    
    Args:
        code: String containing Python code with visualization functions
        df: Pandas DataFrame containing the data
    """
    try:
        # Create a namespace to execute the code
        namespace = {
            'df': df,
            'px': px,
            'go': go,
            'make_subplots': make_subplots,
            'np': np
        }
        
        # Execute the code
        exec(code, namespace)
        
        # Find visualization functions
        viz_funcs = sorted([f for f in namespace if f.startswith('viz_') and callable(namespace[f])])
        
        if not viz_funcs:
            print("No visualization functions found in the generated code.")
            # st.warning("No visualization functions found in the generated code.")
        else:
            # Create a container for visualizations
            st.markdown("### Generated Data Visualizations")
            
            figs = []  # Collect figures here

            # Display each visualization with its corresponding question
            for viz_func_name in viz_funcs:
                viz_func = namespace[viz_func_name]
                try:
                    # Create a container for this visualization
                    viz_container = st.container()
                    with viz_container:
                        # st.markdown(f"#### Visualization {viz_func_name.split('_')[1]}")
                        
                        # Check if the function accepts a 'df' parameter
                        sig = inspect.signature(viz_func)
                        if 'df' in sig.parameters:
                            fig = viz_func(df)  # Pass the dataframe to the function
                        else:
                            fig = viz_func()  # Call without parameters
                        
                        figs.append(fig)  # Collect the figure
                        st.session_state.figs.append(fig)  # Store the figure in session state
                        # Display the figure
                        st.plotly_chart(fig, use_container_width=True)
                        
                except Exception as e:
                    print(f"Error in visualization {viz_func_name}: {str(e)}")
                    # st.error(f"Error in visualization {viz_func_name}: {str(e)}")
                    
    except Exception as e:
        print(f"Error executing visualization code: {str(e)}")
        # st.error(f"Error executing visualization code: {str(e)}")